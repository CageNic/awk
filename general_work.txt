# nullify (replace) the dash on first column
awk '{gsub(/-/,"",$1);print}' file

# replace CA with ca on first column
awk '{gsub(/CA/,"ca",$1);print}' file

# replace double space with single space on all columns
awk '{gsub("    "," ");print}' file

# same as... 
awk '{gsub("    "," ",$0);print}' file

# same as (instead of a semi colon separating the command and the print statement
# close the command with } so the command is in {} and have the print statement in its own {}
awk '{gsub("    "," ",$0)} {print}' file

###########################################################
# assigning 1 variable to multiple arrays - 1 for in loop #
###########################################################

# when assigning 1 variable to multiple arrays with 1 for in loop...
# only the variable used with the array in the for in loop can be used by itself in the print statement

# e.g.

cat tvlogs

Due South,Mon,3
X Files,Mon,2
Doctor Who,Mon,1
Minder,Mon,5
Californication,Tues,5
The Professionals,Sat,5
Minder,Mon,5
Dark Angel,Tues,2
Due South,Wed,1
Buffy,Wed,2
Life on Mars,Thurs,3
Doctor Who,Thurs,4
Monty Python,Fri,1
Due South,Fri,2
Knight Rider,Sat,1
Doctor Who,Sun,1

# what's wanted; uniq list of tv progs (var)
# times watched in total per week for the uniq tv prog
# total hours watched for that uniq tv prog per week
# ===================================================================

# var produces uniq tv progs (as the variable var is assined to the array tv) - for var in tv

# tv[var] produces times watched in total per week for the uniq tv prog...that is, it counts the amount of times a tv prog appears in $1

# count[var]  produces total hours watched per week for the uniq tv prog...that is, it sums the hours watched for the amount of times a tv prog appears in $1

# but aren't we using the variable "var" twice?
# yes
# even though it has only be referenced once - for the array "tv" (for var in tv) - we can use it as a variable for the array "count"?
# yes

# but the variable "var" is exclusively for the array "tv" - so wherever you use it (just the variable) in the print statement...
# it will only print the uniq list of tv progs from $1

# ===================================================================

awk 'BEGIN {FS=",";
  printf ("%-10s\t\t%-10s\t\t%-10s\n", "tv programme","watched weekly","hours watched weekly")}
{
tv[$1]++
count[$1]+=$3
}
END{
for (var in tv)
printf ("%-10s\t\t%10d\t\t%10s\n", var,tv[var],count[var])}' tvlogs

# ===================================================================

tv programme            watched weekly          hours watched weekly
The Professionals                1                       5
Minder                           2                      10
Doctor Who                       3                       6
X Files                          1                       2
Life on Mars                     1                       3
Buffy                            1                       2
Knight Rider                     1                       1
Due South                        3                       6
Monty Python                     1                       1
Californication                  1                       5
Dark Angel                       1                       2

# ===================================================================

# var variable now appearing twice - produces same output - as it is assigned to tv array, for (var in tv)

# =======================================================================================
tv programme            watched weekly          hours watched weekly
The Professionals                1                       5      	The Professionals
Minder                           2                      10          	Minder
Doctor Who                       3                       6      	Doctor Who
X Files                          1                       2         	X Files
Life on Mars                     1                       3      	Life on Mars
Buffy                            1                       2           	Buffy
Knight Rider                     1                       1      	Knight Rider
Due South                        3                       6       	Due South
Monty Python                     1                       1      	Monty Python
Californication                  1                       5      	Californication
Dark Angel                       1                       2      	Dark Angel

##################################################################################

####################################
# FS and array separator different #
####################################

# declaring a FS with BEGIN statement and a separator to be used with the array

cat bands_1
alice in chains,album,cd        grunge  seattle
pearl jam,album,cd      grunge  seattle
mad season,album,download       grunge  seattle
mother love bone,album,cd       grunge  seattle
alice in chains,album,cd        grunge  seattle
pearl jam,album,cd      grunge  seattle
alice in chains,facelift,download,cd    grunge  seattle

# 1st field is alice in chains,album,cd
# tab space is field separator
# 2nd field is grunge
# 3rd field is seatle

# if we just want to delcare the band name as the array, 
# would need the FS to be , and $1 to take the array from - {FS=","} {split ($1,myarray)}
===================================================

awk '{FS=","} {split ($1,myarray)
         for (i=1;i<=myarray[i];i++)
         print myarray[i]
         }' bands_1

alice in chains
pearl jam
mad season
mother love bone
alice in chains
pearl jam
alice in chains
===================================================

# if we wanted to declare alice in chains,album,cd as 1 array, need the FS to be tab

awk '{FS="\t"} {split ($1,myarray)
         for (i=1;i<=myarray[i];i++)
         print myarray[i]
         }' bands_1

alice in chains,album,cd
pearl jam,album,cd
mad season,album,download
mother love bone,album,cd
alice in chains,album,cd
pearl jam,album,cd
alice in chains,facelift,download,cd
====================================================

# if we wanted to declare alice in chains as array1, album as array2 and cd as array3
# need the FS to be tab BUT the array separator as ,

awk '{FS="\t"} {split($1,myarray,",")                                                                            
for (i=1;i<=myarray[i];i++)
         print myarray[i]
         }' bands_1

alice in chains
album
cd
pearl jam
album
cd
mad season
album
download
mother love bone
album
cd
alice in chains
album
cd
pearl jam
album
cd
alice in chains
facelift
download
cd
============================================================

# if we wanted alice in chains as array1, album as array2 and cd, grunge, seattle as array3

awk '{FS="\t"} {split($0,myarray,",")                                                                            
for (i=1;i<=myarray[i];i++)
         print myarray[i]
         }' bands_1

alice in chains
album
cd      grunge  seattle
pearl jam
album
cd      grunge  seattle
mad season
album
download        grunge  seattle
mother love bone
album
cd      grunge  seattle
alice in chains
album
cd      grunge  seattle
pearl jam
album
cd      grunge  seattle
alice in chains
facelift
download
cd      grunge  seattle
============================================================

# if we wanted alice in chains, album, cd as array1, grunge as array2, seattle as array3

awk '{FS=","} {split($0,myarray,"\t")                                                                            
for (i=1;i<=myarray[i];i++)
         print myarray[i]
         }' bands_1

alice in chains,album,cd
grunge
seattle
pearl jam,album,cd
grunge
seattle
mad season,album,download
grunge
seattle
mother love bone,album,cd
grunge
seattle
alice in chains,album,cd
grunge
seattle
pearl jam,album,cd
grunge
seattle
alice in chains,facelift,download,cd
grunge
seattle
===========================================================

# if we wanted to declare the whole line; alice in chains as array1, album as array2
# cd as array3, grunge as array4 and seattle as array5
# FS=RS, that is the field separator is a new line

awk '{FS=RS} {split($0,myarray)                                                                                  
for (i=1;i<=myarray[i];i++)
         print myarray[i]
         }' bands_1
         
alice in chains,album,cd        grunge  seattle
pearl jam,album,cd      grunge  seattle
mad season,album,download       grunge  seattle
mother love bone,album,cd       grunge  seattle
alice in chains,album,cd        grunge  seattle
pearl jam,album,cd      grunge  seattle
alice in chains,facelift,download,cd    grunge  seattle

#########################################################

################################
# practical awk array examples #
################################

Practical Awk Array Examples
All the examples given below uses the Iplogs.txt file shown below. This sample text file contains list of ip address requested by the gateway server. This sample Iplogs.txt file contains data in the following format:
[date] [time] [ip-address] [number-of-websites-accessed]

$ cat Iplogs.txt

180607 093423	123.12.23.122 133
180607 121234	125.25.45.221 153
190607 084849   202.178.23.4 44
190607 084859   164.78.22.64 12
200607 012312	202.188.3.2 13
210607 084849   202.178.23.4 34
210607 121435	202.178.23.4 32
210607 132423	202.188.3.2 167

List all unique IP addresses and number of times it was requested
$ awk '{
> Ip[$3]++;
> }
> END{
> for (var in Ip)
> print var, "access", Ip[var]," times"
> }
> ' Iplogs.txt


125.25.45.221 access 1  times
123.12.23.122 access 1  times
164.78.22.64 access 1  times
202.188.3.2 access 2  times
202.178.23.4 access 3  times

In the above script:
•	Third field ($3) is an ip address. This is used as an index of an array called Ip.
•	For each line, it increments the value of the corresponding ip address index.
•	Finally in the END section, all the index will be the list of unique IP address and its corresponding values are the occurrence count.

List all the IP address and calculate how many sites it accessed
The last field in the Iplogs.txt is the number of sites each IP address accessed on a particular date and time. The below script generates the report which has list of IP address and how many times it requested gateway and total number of sites it accessed.

$cat ex2.awk

BEGIN {
print "IP Address\tAccess Count\tNumber of sites";
}
{
Ip[$3]++;
count[$3]+=$NF;
}
END{
for (var in Ip)
	print var,"\t",Ip[var],"\t\t",count[var];
}

$ awk -f ex2.awk Iplogs.txt

IP Address	Access Count	Number of sites
125.25.45.221 	 1 		 153
123.12.23.122 	 1 		 133
164.78.22.64 	 1 		 12
202.188.3.2 	       2 		 180
202.178.23.4 	 3 		 110

In the above example:
•	It has two arrays. The index for both the arrays are same — which is the IP address (third field).
•	The first array named “Ip” has list of unique IP address and its occurrence count. The second array called “count” has the IP address as an index and its value will be the last field (number of sites), so whenever the IP address comes it just keeps on adding the last field.
•	In the END section, it goes through all the IP address and prints the Ip address and access count from the array called Ip and number of sites from the array count.

Identify maximum access day
$ cat ex3.awk
{
date[$1]++;
}
END{
for (count in date)
{
	if ( max < date[count] ) {
		max = date[count];
		maxdate = count;
	}

}
print "Maximum access is on", maxdate;
}

$ awk -f ex3.awk Iplogs.txt

Maximum access is on 210607

In this example:
•	array named “date” has date as an index and occurrence count as the value of the array.
•	max is a variable which has the count value and used to find out the date which has max count.
•	maxdate is a variable which has the date for which the count is maximum.

everse the order of lines in a file

$ awk '{ a[i++] = $0 } END { for (j=i-1; j>=0;) print a[j--] }' Iplogs.txt

210607 132423	202.188.3.2 167
210607 121435	202.178.23.4 32
210607 084849      202.178.23.4 34
200607 012312	202.188.3.2 13
190607 084859      164.78.22.64 12
190607 084849      202.178.23.4 44
180607 121234	125.25.45.221 153
180607 093423	123.12.23.122 133

In this example,
•	It starts by recording all the lines in the array ‘a’.
•	When the program has finished processing all lines, Awk executes the END { } block.
•	The END block loops over the elements in the array ‘a’ and prints the recorded lines in reverse manner.

###############################################
# variables and / or arrays - which is better #
###############################################

variables and/or arrays which is better?

Not using a for loop, they can produce the same results

USSR     8649    275     Asia
Canada   3852    25      North America
China    3705    1032    Asia
USA      3615    237     North America
Brazil   3286    134     South America
India    1267    746     Asia
Mexico   762     78      North America
France   211     55      Europe
Japan    144     120     Asia
Germany  96      61      Europe
England  94      56      Europe

Pattern and variables (no array, no for loop)

#!/usr/bin/awk –f

BEGIN {FS=OFS="\t"}
$4~/Asia/{pop +=$3; n=n+1} 

# when the 4th field is Asia, SUM the population of these Asian countries; and COUNT the Asian countries

END       {print "Total population of the", n, "Asian countries is", pop, "million"
           }

pattern and array (no variable, no for loop)

#!/usr/bin/awk -f

/Asia/ {pop["Asia"] +=$3}       

# Pattern using match operators, array using { [ ] +=$3}

/Europe/ {pop["Europe"] +=$3}   

# Pattern using match operators, array using { [ ] +=$3}

END {print "Asian population is",            
     pop["Asia"], "million"

    print "European population is",
            pop["Europe"], "million"} 

Each section; Asian and European could have its own END section, surrounded with { }
END {for Asian section}
END {for European section}

Pattern and array (no variable, with for loop)

#!/usr/bin/awk -f
BEGIN {FS=”\t”}
/Europe/ {europeancountry[$1]= $4}    
# an array with a search pattern 
 {for (name in europeancountry)                            
# name is the country based on the /Europe/ match                                                                europeancountry[name] is the value of = $4
print name, "is in", europeancountry[name]
 }
}
array only (no pattern, no variable) - array used in for loop

#!/usr/bin/awk -f

{FS="\t"}

{pop[$4] += $3}     
# an array that will provide all continents in the 4th field and provide their populations from the 3rd field       
# no search pattern is needed before the array, no string such as “Asia” in {pop[“Asia”]+=$3} is needed
END {for (name in pop)
 print pop[name], "million is the population of", name 
}
}
 
•	pop[name] is the total from the value += $3  
•	name is continent from $4   
•	you cant print pop without [name]
•	you can print name without pop

####################################
# awk and bash to change file name #
####################################

#!/bin/bash

# convert q-mts1120802224162-genmean.wav to  1120802224162_H.wav
# convert q-mts1120802224162-dnamean.wav to  1120802224162_D.wav
# convert q-mts1120802224162-gmmena.wav  to  1120802224162_M.wav

# genmean = H
# dnamean = D
# gmmean = M

for original in *.wav
do
newformat=$(echo $original | awk 'BEGIN {FS="-"}

{serial=substr($0,6,13)}
  {if ($3~/genmean/)                  # genmean
    print serial"_H.WAV"

        else if ($3~/dnamean/)        # dnamean
         print serial"_D.WAV"

          else print serial"_M.WAV"   # gmmean
}')

cp "${original}" "${newformat}"

done

#########################
# AWK AND NOT operators #
#########################

# Finding films by Bob Smith, but not Bob Stewart

gawk 'BEGIN {FS=","}
/[Ss]mith/ && !/[Ss]tewart/ {count++ ;  print count,$0}' filmdatabasecopy.txt

1 film1,Bob Smith
2 film2,Bob Smith
3 film3,Bob Smith
4 film4,Bob Smith
5 film5,Bob Smith
6 film6,Bob Smith
7 film7,Bob Smith
8 film8,Bob Smith

##################################
# awk 2 dimensional arrays part1 #
##################################

awk 2 dimensional array
=======================

2 indices as the "key" array       [$1,$2]    +=  $3
                       
                       arrayname    indices   value

The following program illustrates how you can use a two dimensional array in awk
Assume the first field of each input record contains a product number, the second field contains a month number, and the third field contains a quantity (bought, sold, or whatever)
The program generates a table of products versus month.

can output to an open office file using tab as delimiter

# note that the print statement for headers can be with the BEGIN or END statment

cat 2dimensionalarray.txt
=========================
1       1       123
2       2       100
4       3       100
5       4       100
=========================

cat 2dimensionalarray.awk
=========================
BEGIN	{FS="\t" ; NUMPROD = 5
         print "\t Jan\t Feb\tMarch\tApril\t May\t" \
    	    "June\tJuly\t Aug\tSept\t Oct\t Nov\t Dec"
			}
    {
    	array[$1,$2] += $3
    }
    END	{
           for (prod = 1; prod <= NUMPROD; prod++) {
    		 printf "%-7s", "prod#" prod
    		   for (month = 1; month <= 12; month++){
    			printf "\t%5d", array[prod,month]
    		}
    		printf "\n"
    	}
    }
    
===================================================
produces
===================================================
         Jan     Feb    March   April    May    June    July     Aug    Sept
 Oct     Nov     Dec
prod#1    123       0       0       0       0       0       0       0       0
    0       0       0
prod#2      0     100       0       0       0       0       0       0       0
    0       0       0
prod#3      0       0       0       0       0       0       0       0       0
    0       0       0
prod#4      0       0     100       0       0       0       0       0       0
    0       0       0
prod#5      0       0       0     100       0       0       0       0       0
    0       0       0
==============================================================================

# print statement for headers with END statement

BEGIN	{FS="\t" ; NUMPROD = 5}
    {
    	array[$1,$2] += $3
    }
    END	{
    	print "\t Jan\t Feb\tMarch\tApril\t May\t" \
    	    "June\tJuly\t Aug\tSept\t Oct\t Nov\t Dec"
    	for (prod = 1; prod <= NUMPROD; prod++) {
    		printf "%-7s", "prod#" prod
    		for (month = 1; month <= 12; month++){
    			printf "\t%5d", array[prod,month]
    		}
    		printf "\n"
    	}
    }

##################################
# awk 2 dimensional arrays part2 #
##################################

awk - excellent example of multi-dimensional array
==================================================

Given a list like:

cat file1
==========
Dog bone
Cat catnip
Human ipad
Dog collar
Dog collar
Cat collar
Human car
Human laptop
Cat catnip
Human ipad
============

How can I get results like this, using awk:

cat complete.data
=================
Dog bone 1
Dog collar 2
Cat catnip 2
Cat collar 1
Human car 1
Human laptop 1
Human ipad 2
=================

awk does not have multi-dimensional arrays, but you can manage by constructing 2D-ish array keys:

=================================================================================
awk '{count[$1 " " $2]++} END {for (key in count) print key, count[key]}' | sort
=================================================================================

which, from your input, outputs

Cat catnip 2
Cat collar 1
Dog bone 1
Dog collar 2
Human car 1
Human ipad 2
Human laptop 1

Here, I use a space to separate the key values
If your data contains spaces, you can use some other character that does not appear in your input
I typically use array[$a FS $b] when I have a specific field separator, since that's guaranteed not to appear in the field values

##################################
# awk 2 dimensional arrays part3 #
##################################

# multidimensional array, using 2 or more fields as index - subsep
# instead of a duplicate occurence in 1 field
# can spread duplicate occurences over mutli-fields (identicals in 2 fields...or more not just 1 field)
# eg print frequency report of station and genre where BBC1 sport etc occurs

cat tvdata
==================================
BBC1;sport;football;10
BBC1;news;politics;20
BBC1;comedy;satire;05
ITV;drama;Minder;200
BBC1;drama;Doctor Who;100
BBC2;documentary;dinosaurs;100
ITV;drama;A touch of Frost;150
BBC3;comedy;bad education;100
BBC1;sport;football;10
ITV;drama;Minder;200
ITV;news;local news;100
C4;news;world news;100
BBC4;drama;the killing;300
BBC1;drama;Merlin;300
BBC3;comedy;bad education;100
BBC1;sport;football;10
BBC1;comedy;satire;05
C4;news;world news;100
ITV3;films;action films;100
BBC2;sport;tennis;100
BBC4;documentary;Mark Gatis;100
BBC3;film;the letter;200
ITV;drama;the sweeney;100
BBC4;documentary;Matthew Sweet;100
ITV4;film;retro films;200
ITV3;films;action films;100
BBC2;drama;the x-files;300
BBC1;drama;life on mars;300
C4;news;world news;100
====================================

cat tvdata.awk
====================================
#!/usr/bin/awk -f

BEGIN {FS=";"
       OFS="\t"
       SUBSEP=","
      }
{stationandgenre[$1,$2]++}

END {for (x in stationandgenre)

       if (stationandgenre[x]==1)

        print "There is",stationandgenre[x]" viewing of", x

          else if (stationandgenre[x]>1)

        print "There are",stationandgenre[x]" viewings of",x

          else

        print "No data available"

     }

=============================================================
produces
=============================================================
There are       3 viewings of   C4,news
There are       2 viewings of   BBC4,documentary
There are       2 viewings of   BBC1,comedy
There are       3 viewings of   BBC1,sport
There is        1 viewing of    BBC2,drama
There is        1 viewing of    BBC2,sport
There is        1 viewing of    BBC2,documentary
There is        1 viewing of    BBC1,news
There is        1 viewing of    ITV,news
There are       3 viewings of   BBC1,drama
There are       4 viewings of   ITV,drama
There is        1 viewing of    ITV4,film
There is        1 viewing of    BBC4,drama
There are       2 viewings of   ITV3,films
There is        1 viewing of    BBC3,film
There are       2 viewings of   BBC3,comedy
===========================================

# what if we need a frequency of BBC1 sport football (station, genre and tvprog)
# just add the 3rd field to the array

#!/usr/bin/awk -f

BEGIN {FS=";"
       OFS="\t"
       SUBSEP=","
      }
{stationandgenre[$1,$2,$3]++}

END {for (x in stationandgenre)

       if (stationandgenre[x]==1)

        print "There is",stationandgenre[x]" viewing of", x

          else if (stationandgenre[x]>1)

        print "There are",stationandgenre[x]" viewings of",x

          else

        print "No data available"

     }
=============================================================
produces
=============================================================

There is        1 viewing of    BBC1,drama,life on mars
There is        1 viewing of    BBC4,documentary,Matthew Sweet
There is        1 viewing of    ITV,drama,A touch of Frost
There is        1 viewing of    BBC4,drama,the killing
There are       2 viewings of   BBC3,comedy,bad education
There is        1 viewing of    BBC1,drama,Doctor Who
There is        1 viewing of    BBC1,news,politics
There are       2 viewings of   ITV3,films,action films
There is        1 viewing of    ITV,news,local news
There is        1 viewing of    ITV4,film,retro films
There is        1 viewing of    BBC3,film,the letter
There are       2 viewings of   ITV,drama,Minder
There are       2 viewings of   BBC1,comedy,satire
There is        1 viewing of    BBC4,documentary,Mark Gatis
There is        1 viewing of    ITV,drama,the sweeney
There is        1 viewing of    BBC1,drama,Merlin
There are       3 viewings of   C4,news,world news
There is        1 viewing of    BBC2,documentary,dinosaurs
There is        1 viewing of    BBC2,drama,the x-files
There is        1 viewing of    BBC2,sport,tennis
There are       3 viewings of   BBC1,sport,football
========================================================================

# and using the 4th field - we can get a combined total for each viewing

#!/usr/bin/awk -f

BEGIN {FS=";"
       OFS="\t"
       SUBSEP=","
      }
{stationandgenre[$1,$2,$3]++
 count[$1,$2,$3] += $4
 }

END {for (x in stationandgenre)

       if (stationandgenre[x]==1)

        print "There is",stationandgenre[x]" viewing of", x,count[x]

          else if (stationandgenre[x]>1)

        print "There are",stationandgenre[x]" viewings of",x,count[x]

          else

        print "No data available"

     }
=====================================================================
produces
=====================================================================
There is        1 viewing of    BBC1,drama,life on mars 300
There is        1 viewing of    BBC4,documentary,Matthew Sweet  100
There is        1 viewing of    ITV,drama,A touch of Frost      150
There is        1 viewing of    BBC4,drama,the killing  300
There are       2 viewings of   BBC3,comedy,bad education       200
There is        1 viewing of    BBC1,drama,Doctor Who   100
There is        1 viewing of    BBC1,news,politics      20
There are       2 viewings of   ITV3,films,action films 200
There is        1 viewing of    ITV,news,local news     100
There is        1 viewing of    ITV4,film,retro films   200
There is        1 viewing of    BBC3,film,the letter    200
There are       2 viewings of   ITV,drama,Minder        400
There are       2 viewings of   BBC1,comedy,satire      10
There is        1 viewing of    BBC4,documentary,Mark Gatis     100
There is        1 viewing of    ITV,drama,the sweeney   100
There is        1 viewing of    BBC1,drama,Merlin       300
There are       3 viewings of   C4,news,world news      300
There is        1 viewing of    BBC2,documentary,dinosaurs      100
There is        1 viewing of    BBC2,drama,the x-files  300
There is        1 viewing of    BBC2,sport,tennis       100
There are       3 viewings of   BBC1,sport,football     30

###############
# awk as grep #
###############

46013   DURHAM      STEVEN      MOBILE   AL
46015   STEEN       BILL        MOBILE   AL
46017   FELDMAN     EVAN        MOBILE   AL
46018   SWIM        STEVE       UNKNOWN  AL
46019   BOGUE       ROBERT      PHOENIX  AR
46021   JUNE        MICAH       PHOENIX  AR
46022   KANE        SHERYL      UNKNOWN  AR
46024   WOOD        WILLIAM     MUNCIE   IN
46026   FERGUS      SARAH       MUNCIE   IN
46027   BUCK        SARAH       MUNCIE   IN
46029   TUTTLE      BOB         MUNCIE   IN
===========================================

to search for regional expression in field 3...

LINUX-> awk '$3~/EVE/' hungawk.bak
46013   DURHAM      STEVEN      MOBILE   AL
46018   SWIM        STEVE       UNKNOWN  AL

OR THIS PRODUCES THE SAME RESULT (WITH OR WITHOUT THE PRINT OPTION TO INCLUDE THE ENTIRE RANGE OF FIELDS
=============================================================================

LINUX-> awk '$3~/EVE/ {print}' hungawk.bak
46013   DURHAM      STEVEN      MOBILE   AL
46018   SWIM        STEVE       UNKNOWN  AL

THE DEFINED FIELD IN THE PRINT COMMAND PRODUCES THE OUTPUT WITH ONLY THAT FIELD PRINTED. YOU COULD ADD MORE FIELDS - OR ALL FIELDS BY TYPING IN THE RANGE OF FIELDS

LINUX-> awk '$3~/EVE/ {print $3}' hungawk.bak
STEVEN
STEVE

####################################################################################
# pattern search in files and use FILENAME to identify which file pattern found in #
####################################################################################

# using awk with FILENAME function

LINUX-> awk '$2~/^1862304/ {print $0, "found in", FILENAME}' serials*

03278 186230423 found in serials.auto_recode
06438 186230421 found in serials.force
05500 186230422 found in serials.force

########################################
# adding awk field totals going across #
########################################

# using the += 

echo 1 2 3 4 5 | awk '{for (x=1;x<=NF;x++) total+=$x} END {print total}'
15

# usin the total=total+ 

echo 1 2 3 4 5 | awk '{for (x=1;x<=NF;x++) total=total+$x} END {print total}'
15

################################
# experimenting with variables #
################################

British films script to pull British films and various other information from film database

#!/usr/bin/awk -f

BEGIN {FS=",";OFS="\t"}

##############################################################################################################
# create variables - not arrays

$2~/British/ {brit ++} # can't have $0 == "British"
                       # must be either a specific field == "British"
                       # or $0~/British/ or no field specified and just /British/
                       # but not specifying a field can give a false reading if the word "British" appears throughout the file and not just representing the country specific field of $2

/[Tt]igon/ {tigon++}   # allowing for capital/smallcase T     pattern variable

/[Hh]ammer/ {hammer++} # allowing for capital/smallcase H     pattern variable

/[Aa]micus/ {amicus++} # allowing for capital/smallcase A     pattern variable

/[Nn]orman [Ww]isdom/ {norman++}                            # pattern variable

/[Ss]id [Jj]ames/ {sid++}                                   # pattern variable

{if ($2=="British") print > "British_films.txt"} 
                   
# append all print lines to the file British_films.txt # if only put the append redirectional output on 1 line - it's that line that appends to file

END       {print "=========================================="      >> "British_films.txt"
           print "Total British films in database are", brit       >> "British_films.txt"
           print "Of which",tigon,"are Tigon films..."             >> "British_films.txt"
           print "Of which",hammer,"are Hammer films..."           >> "British_films.txt"
           print "Of which",amicus,"are Amicus films..."           >> "British_films.txt"
           print "Of which Morman Wisdom appers in",norman,"films"   >> "British_films.txt"
           print "Of which Sid James appears in",sid,"films"         >> "British_films.txt"
           print "=========================================="      >> "British_films.txt"
           print "##########################################"   # this line appears as output to screen not in file
           print "British_films.txt file created with report"   # this line appears as output to screen not in file
           print "##########################################"   # this line appears as output to screen not in file
          }
#############################################################################################################

# This array could be used instead of the variable /[Hh]ammer/ {hammer++}

# {hammer[$3]++ }     # create an array that counts amount of hammer films

# END {for (i in hammer)
#     print "there are", hammer[i] , "Hammer films"
#   }
#############################################################################################################


#############################
# awk to remove blank lines #
#############################

awk to remove blank lines as per sed '/^$/d' and grep -v ^$

cat file1

=============================
this is a line
and another line

more lines

and here
and there

here is a nice line
=============================

# set awk FS to tab so that each sentence is a field, and not each word is a field (separated by default space)

awk 'BEGIN {FS="\t"}{c=NF; print c}' file1   # giving the NF variable a user defined variable
==========================================
1
1
0
1
0
1
1
0
1

# or

awk 'BEGIN {FS="\t"}{print NF}' file1       # not giving the NF variable a user defined variable
======================================
1
1
0
1
0
1
1
0
1


# so any line where there are no fields is a blank line
# therefore
# to count non blank lines                        

awk 'BEGIN {FS="\t"} NF != 0 {nonblanks++} END {print nonblanks}' file1
=========================================================================
6

# to count blank lines

awk 'BEGIN {FS="\t"} NF == 0 {blanks++} END {print blanks}' file1
=================================================================
3

# to remove blank lines

awk 'BEGIN {FS="\t"} NF != 0 {print}' file1
===========================================

this is a line
and another line
more lines
and here
and there
here is a nice line

######################################################################

##########################################################################
# awk print only the header - and only the header with a matched pattern #
##########################################################################

# code to print the header only

awk 'BEGIN {FS="\t"}NR <2 {print}' xfiles.csv

TITLE		COUNTRY            YEAR          FORMAT

# add the code to print what comes after the header

awk 'BEGIN {FS="\t"}NR <2 {print}
$1~/season/ {print}' xfiles.csv

TITLE		      COUNTRY        YEAR             FORMAT
THE X-Files season1   USA            1993             DVD
THE X-Files season2   USA            1994             DVD
THE X-Files season3   USA            1995             DVD
THE X-Files season4   USA            1996             DVD
THE X-Files season5   USA            1997             DVD
THE X-Files season6   USA            1998             DVD
THE X-Files season7   USA            1999             DVD
THE X-Files season8   USA            2000             DVD
THE X-Files season9   USA            2001             DVD

# header plus pattern "season"

#########################################################

###################
# awk sum columns #
###################

Input file:

$ cat file.txt
==============
500:120:100
100:120:700
200:900:125
120:120:900
==============

# Required:
# Compute the sum of individual columns of the above file. i.e. required output:

920:1260:1825
==============================================================================

## Awk solution - 1:

$ awk 'BEGIN {FS=OFS=":"}

  NR == 1 { n1 = $1; n2 = $2; n3 = $3;  next }
    
          { n1 += $1; n2 += $2; n3 += $3 }
          
            END { print n1, n2, n3 }' file.txt

# Output:
# 920:1260:1825

#---------------------------------------------------------------------------------
## Awk solution - 2:

$ awk 'BEGIN FS=":"}

{ for (i=1; i<=NF; ++i) sum[i] += $i }

           END { for (i=1; i <= NF; ++i) printf "%s ", sum[i]; printf "\n"; }
           ' file.txt

# Output:
920 1260 1825

#===============================================================================

# Sum numbers in each row - awk

# Input file contains the scores of few students in certain rounds of a game in the following format.

id,Name,score1,score2,score3 etc
================================

$ cat file.txt
=============================
id9,Mohit Kishore,19,13,14,10
id2,Niraj Kumar,13,8,23,8
id8,Kate Nil,19,18,15
id4,Rashi S,19,28,65,10,19
=============================

# Required output:

# Calculate the sum and average score of each student (notice that the number of rounds played by each student is not constant, few played 3 rounds, few 4 etc)

# The awk script:

$ awk '
BEGIN {FS=OFS=","}
{
sum=0; n=0
for(i=3;i<=NF;i++)
     {sum+=$i; ++n}
     print $0,"sum:"sum,"count:"n,"avg:"sum/n
}' file.txt
=============================================
Output:

id9,Mohit Kishore,19,13,14,10,sum:56,count:4,avg:14
id2,Niraj Kumar,13,8,23,8,sum:52,count:4,avg:13
id8,Kate Nil,19,18,15,sum:52,count:3,avg:17.3333
id4,Rashi S,19,28,65,10,19,sum:141,count:5,avg:28.2
##########################################################

###############
# parentheses #
###############

# parentheses are used to group options together

/(blue|black)bird/   { print $0 } 
$2 ~ /(blue|black)bird/   { print $0 }
#########################################################

################################################
# using a variable to declare a search pattern #
################################################

# needs BEGIN

BEGIN  { matchstr = /(blue|black)bird/ } 
        $2  ~  matchstr  { print $0 }
################################################







